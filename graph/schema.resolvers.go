package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"autoapi/graph/model"
	"autoapi/store"
	"autoapi/util"
	"context"
)

// StoreConfig is the resolver for the storeConfig field.
func (r *mutationResolver) StoreConfig(ctx context.Context, config model.ServerConfigInput) (*model.ServerConfig, error) {
	conf := &model.ServerConfig{
		ID:               util.GenerateUUID(),
		GraphPackagePath: config.GraphPackagePath,
		PlaygroundPath:   config.PlaygroundPath,
		QueryPath:        config.QueryPath,
		GinMode:          model.GinMode(config.GinMode),
		Port:             config.Port,
	}

	return store.StoreConfigInDB(conf)
}

// DeleteServerConfig is the resolver for the deleteServerConfig field.
func (r *mutationResolver) DeleteServerConfig(ctx context.Context, id string) (bool, error) {
	err := store.DeleteConfigFromDB(id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// DeleteAllServerConfigs is the resolver for the deleteAllServerConfigs field.
func (r *mutationResolver) DeleteAllServerConfigs(ctx context.Context) (bool, error) {
	err := store.DeleteAllConfigsFromDB()
	if err != nil {
		return false, err
	}
	return true, nil
}

// AllServerConfigs is the resolver for the allServerConfigs field.
func (r *queryResolver) AllServerConfigs(ctx context.Context) ([]*model.ServerConfig, error) {
	return store.GetAllConfigsFromDB()
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
